#!/bin/bash

echo "üöÄ Script de D√©ploiement Railway pour Coovia Backend"
echo "=================================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier si nous sommes dans le bon r√©pertoire
if [ ! -f "composer.json" ]; then
    print_error "Ce script doit √™tre ex√©cut√© depuis le dossier backend/"
    exit 1
fi

print_status "V√©rification de l'environnement..."

# V√©rifier si Git est install√©
if ! command -v git &> /dev/null; then
    print_error "Git n'est pas install√©"
    exit 1
fi

# V√©rifier si nous sommes dans un repository Git
if [ ! -d ".git" ]; then
    print_error "Ce dossier n'est pas un repository Git"
    exit 1
fi

# V√©rifier le statut Git
print_status "V√©rification du statut Git..."
if [ -n "$(git status --porcelain)" ]; then
    print_warning "Il y a des modifications non commit√©es"
    echo "Fichiers modifi√©s :"
    git status --porcelain
    echo ""
    read -p "Voulez-vous continuer ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_status "D√©ploiement annul√©"
        exit 0
    fi
fi

# G√©n√©rer la cl√© d'application si elle n'existe pas
print_status "V√©rification de la cl√© d'application..."
if [ ! -f ".env" ] || ! grep -q "APP_KEY=base64:" .env; then
    print_warning "Cl√© d'application non trouv√©e"
    print_status "G√©n√©ration d'une nouvelle cl√©..."
    APP_KEY=$(php artisan key:generate --show)
    print_success "Cl√© g√©n√©r√©e: $APP_KEY"
    print_warning "N'oubliez pas d'ajouter cette cl√© dans les variables d'environnement Railway"
else
    print_success "Cl√© d'application d√©j√† configur√©e"
fi

# V√©rifier les fichiers de configuration
print_status "V√©rification des fichiers de configuration..."

if [ ! -f "railway.json" ]; then
    print_error "railway.json manquant"
    exit 1
fi

if [ ! -f "Procfile" ]; then
    print_error "Procfile manquant"
    exit 1
fi

if [ ! -f "build.sh" ]; then
    print_error "build.sh manquant"
    exit 1
fi

print_success "Tous les fichiers de configuration sont pr√©sents"

# Rendre le script de build ex√©cutable
chmod +x build.sh

# Commit des modifications si n√©cessaire
if [ -n "$(git status --porcelain)" ]; then
    print_status "Commit des modifications..."
    git add .
    git commit -m "üöÄ Pr√©paration du d√©ploiement Railway - $(date)"
fi

# Push vers GitHub
print_status "Push vers GitHub..."
if git push; then
    print_success "Code pouss√© vers GitHub avec succ√®s"
else
    print_error "Erreur lors du push vers GitHub"
    exit 1
fi

echo ""
echo "üéâ D√©ploiement pr√©par√© avec succ√®s !"
echo ""
echo "üìã Prochaines √©tapes :"
echo "1. Allez sur https://railway.app"
echo "2. Cr√©ez un nouveau projet"
echo "3. Connectez votre repository GitHub"
echo "4. S√©lectionnez le dossier 'backend'"
echo "5. Configurez les variables d'environnement (voir railway.env)"
echo "6. D√©ployez !"
echo ""
echo "üîó Documentation compl√®te : RAILWAY_DEPLOYMENT_GUIDE.md"
echo ""
print_success "Script termin√© avec succ√®s !"
