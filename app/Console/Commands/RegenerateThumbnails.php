<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\StoreMediaFile;
use App\Services\CloudflareUploadService;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Log;

class RegenerateThumbnails extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'media:regenerate-thumbnails {--force : Forcer la r√©g√©n√©ration m√™me si les thumbnails existent}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'R√©g√©n√©rer les thumbnails pour toutes les images existantes';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üñºÔ∏è  R√©g√©n√©ration des thumbnails pour les images existantes');
        $this->info('========================================================');
        $this->newLine();

        try {
            // R√©cup√©rer toutes les images
            $imageFiles = StoreMediaFile::where('type', 'image')->get();
            
            if ($imageFiles->isEmpty()) {
                $this->warn('Aucune image trouv√©e dans la base de donn√©es.');
                return;
            }
            
            $this->info("üìä Nombre d'images trouv√©es : " . $imageFiles->count());
            $this->newLine();
            
            $processed = 0;
            $errors = 0;
            $skipped = 0;
            
            $progressBar = $this->output->createProgressBar($imageFiles->count());
            $progressBar->start();
            
            foreach ($imageFiles as $mediaFile) {
                try {
                    $result = $this->processImage($mediaFile);
                    
                    if ($result === 'processed') {
                        $processed++;
                    } elseif ($result === 'skipped') {
                        $skipped++;
                    }
                    
                } catch (\Exception $e) {
                    $this->error("‚ùå {$mediaFile->name}: " . $e->getMessage());
                    $errors++;
                }
                
                $progressBar->advance();
            }
            
            $progressBar->finish();
            $this->newLine(2);
            
            $this->info('üéØ R√âSUM√â :');
            $this->line("   - Images trait√©es : {$processed}");
            $this->line("   - Images ignor√©es : {$skipped}");
            $this->line("   - Erreurs : {$errors}");
            $this->line("   - Total : " . $imageFiles->count());
            $this->newLine();
            
            if ($processed > 0) {
                $this->info('‚úÖ R√©g√©n√©ration termin√©e avec succ√®s !');
                $this->line('üîÑ Red√©marrez votre application pour voir les changements.');
            } else {
                $this->info('‚ÑπÔ∏è  Aucune image trait√©e.');
            }
            
        } catch (\Exception $e) {
            $this->error('‚ùå Erreur : ' . $e->getMessage());
            $this->error('Stack trace : ' . $e->getTraceAsString());
        }
    }

    /**
     * Traiter une image individuelle
     */
    protected function processImage(StoreMediaFile $mediaFile): string
    {
        // V√©rifier si l'image existe sur le disque
        if (!Storage::disk('r2')->exists($mediaFile->cloudflare_path)) {
            Log::warning("Image non trouv√©e sur le disque: {$mediaFile->cloudflare_path}");
            return 'skipped';
        }
        
        // V√©rifier si les thumbnails existent d√©j√†
        if (!$this->option('force') && $mediaFile->thumbnail_url) {
            $this->line("‚è≠Ô∏è  {$mediaFile->name}: Thumbnails existants, ignor√©");
            return 'skipped';
        }
        
        try {
            // Cr√©er un fichier temporaire pour l'image
            $tempPath = storage_path('app/temp_' . $mediaFile->name);
            $imageContent = Storage::disk('r2')->get($mediaFile->cloudflare_path);
            file_put_contents($tempPath, $imageContent);
            
            // Cr√©er un UploadedFile simul√©
            $uploadedFile = new \Illuminate\Http\UploadedFile(
                $tempPath,
                $mediaFile->name,
                $mediaFile->mime_type,
                null,
                true
            );
            
            // G√©n√©rer les thumbnails
            $cloudflareService = new CloudflareUploadService();
            $thumbnails = $cloudflareService->generateThumbnails(
                $uploadedFile,
                dirname($mediaFile->cloudflare_path),
                $mediaFile->name
            );
            
            // Mettre √† jour l'URL du thumbnail dans la base de donn√©es
            if (!empty($thumbnails) && isset($thumbnails['medium']['url'])) {
                $mediaFile->thumbnail_url = $thumbnails['medium']['url'];
                $mediaFile->save();
                
                $this->line("‚úÖ {$mediaFile->name}: Thumbnails r√©g√©n√©r√©s");
                
                // Nettoyer le fichier temporaire
                unlink($tempPath);
                
                return 'processed';
            } else {
                $this->warn("‚ö†Ô∏è  {$mediaFile->name}: Aucun thumbnail g√©n√©r√©");
                return 'skipped';
            }
            
        } catch (\Exception $e) {
            // Nettoyer le fichier temporaire en cas d'erreur
            if (file_exists($tempPath)) {
                unlink($tempPath);
            }
            throw $e;
        }
    }
}
