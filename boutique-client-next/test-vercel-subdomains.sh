#!/bin/bash

# üè™ Test des Sous-domaines Vercel - wozif.store
echo "üß™ Test des Sous-domaines Vercel - wozif.store"
echo "================================================"

# Couleurs pour l'affichage
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour tester une URL
test_url() {
    local url=$1
    local description=$2
    
    echo -e "\n${YELLOW}üîç Test: $description${NC}"
    echo "URL: $url"
    
    # Test avec curl
    response=$(curl -s -o /dev/null -w "%{http_code}" "$url")
    
    if [ "$response" = "200" ]; then
        echo -e "${GREEN}‚úÖ Status: $response - OK${NC}"
    else
        echo -e "${RED}‚ùå Status: $response - ERREUR${NC}"
    fi
}

# Test de r√©solution DNS
echo -e "\n${YELLOW}üîç Test de r√©solution DNS${NC}"

# Test du domaine principal
if nslookup wozif.store > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ wozif.store r√©sout correctement${NC}"
    nslookup wozif.store | grep "Address:"
else
    echo -e "${RED}‚ùå wozif.store ne r√©sout pas${NC}"
fi

# Test des sous-domaines
if nslookup test-store.wozif.store > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ test-store.wozif.store r√©sout correctement${NC}"
    nslookup test-store.wozif.store | grep "Address:"
else
    echo -e "${RED}‚ùå test-store.wozif.store ne r√©sout pas${NC}"
fi

# Test de l'application
echo -e "\n${YELLOW}üîç Test de l'application${NC}"

# Test du domaine principal
test_url "https://wozif.store" "Domaine principal"

# Test des sous-domaines
test_url "https://test-store.wozif.store" "Sous-domaine test-store"

# Test de l'API backend
echo -e "\n${YELLOW}üîç Test de l'API Backend${NC}"
echo "URL: https://api.wozif.store/api/boutique/test-store"

if curl -s "https://api.wozif.store/api/boutique/test-store" > /dev/null; then
    echo -e "${GREEN}‚úÖ API Backend accessible${NC}"
else
    echo -e "${RED}‚ùå API Backend inaccessible${NC}"
    echo "V√©rifiez que l'API est d√©ploy√©e et accessible"
fi

# V√©rification de la configuration Vercel
echo -e "\n${YELLOW}üîç V√©rification de la configuration Vercel${NC}"

# V√©rifier que le domaine est assign√© au projet
if vercel domains ls | grep -q "wozif.store"; then
    echo -e "${GREEN}‚úÖ Domaine wozif.store trouv√© dans Vercel${NC}"
else
    echo -e "${RED}‚ùå Domaine wozif.store non trouv√© dans Vercel${NC}"
    echo "Ex√©cutez : vercel domains add wozif.store"
fi

# V√©rification de la configuration Next.js
echo -e "\n${YELLOW}üîç V√©rification de la configuration Next.js${NC}"
if [ -f "next.config.mjs" ]; then
    echo -e "${GREEN}‚úÖ next.config.mjs trouv√©${NC}"
else
    echo -e "${RED}‚ùå next.config.mjs manquant${NC}"
fi

if [ -f "src/middleware.ts" ]; then
    echo -e "${GREEN}‚úÖ middleware.ts trouv√©${NC}"
else
    echo -e "${RED}‚ùå middleware.ts manquant${NC}"
fi

if [ -d "src/app/[storeId]" ]; then
    echo -e "${GREEN}‚úÖ Dossier [storeId] trouv√©${NC}"
else
    echo -e "${RED}‚ùå Dossier [storeId] manquant${NC}"
fi

# Test de build
echo -e "\n${YELLOW}üîç Test de build${NC}"
if npm run build > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Build r√©ussi${NC}"
else
    echo -e "${RED}‚ùå Erreur de build${NC}"
    echo "Ex√©cutez 'npm run build' pour voir les erreurs"
fi

# Informations sur le domaine Vercel
echo -e "\n${YELLOW}üîç Informations du domaine Vercel${NC}"
echo -e "${BLUE}Domaine: wozif.store${NC}"
echo -e "${BLUE}Registrar: Vercel${NC}"
echo -e "${BLUE}Expiration: 12 ao√ªt 2026${NC}"
echo -e "${BLUE}Nameservers: ns1.vercel-dns.com, ns2.vercel-dns.com${NC}"

# Instructions de d√©ploiement
echo -e "\n${YELLOW}üîç Instructions de d√©ploiement${NC}"
echo "1. D√©ployer le projet :"
echo -e "${BLUE}   vercel --prod${NC}"
echo ""
echo "2. Assigner le domaine (si n√©cessaire) :"
echo -e "${BLUE}   vercel domains add wozif.store${NC}"
echo ""
echo "3. V√©rifier l'assignation :"
echo -e "${BLUE}   vercel domains ls${NC}"

echo -e "\n${GREEN}‚úÖ Tests termin√©s${NC}"
echo "================================================"
