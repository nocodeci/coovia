#!/bin/bash

# Configuration des sauvegardes automatiques pour Laravel Forge
# Ce script configure les sauvegardes de la base de donn√©es et des fichiers

echo "üíæ Configuration des sauvegardes automatiques..."

# Variables
SITE_DIR="/home/forge/api.coovia.com"
BACKUP_DIR="/home/forge/backups"
DB_NAME="coovia_production"
DB_USER="forge"
BACKUP_RETENTION_DAYS=7

# Cr√©er le r√©pertoire de sauvegarde
mkdir -p "$BACKUP_DIR"

# 1. Script de sauvegarde de la base de donn√©es
cat > "$BACKUP_DIR/backup-database.sh" << 'EOF'
#!/bin/bash

# Script de sauvegarde de la base de donn√©es
SITE_DIR="/home/forge/api.coovia.com"
BACKUP_DIR="/home/forge/backups"
DB_NAME="coovia_production"
DB_USER="forge"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="$BACKUP_DIR/database_$DATE.sql"

# Cr√©er la sauvegarde
cd $SITE_DIR
if [ -f ".env" ]; then
    # Extraire les informations de connexion depuis .env
    DB_HOST=$(grep DB_HOST .env | cut -d '=' -f2)
    DB_PORT=$(grep DB_PORT .env | cut -d '=' -f2)
    DB_DATABASE=$(grep DB_DATABASE .env | cut -d '=' -f2)
    DB_USERNAME=$(grep DB_USERNAME .env | cut -d '=' -f2)
    DB_PASSWORD=$(grep DB_PASSWORD .env | cut -d '=' -f2)
    
    # Cr√©er la sauvegarde PostgreSQL
    PGPASSWORD="$DB_PASSWORD" pg_dump -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USERNAME" -d "$DB_DATABASE" > "$BACKUP_FILE"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Sauvegarde de la base de donn√©es cr√©√©e: $BACKUP_FILE"
        # Compresser la sauvegarde
        gzip "$BACKUP_FILE"
        echo "‚úÖ Sauvegarde compress√©e: $BACKUP_FILE.gz"
    else
        echo "‚ùå Erreur lors de la sauvegarde de la base de donn√©es"
        exit 1
    fi
else
    echo "‚ùå Fichier .env non trouv√©"
    exit 1
fi
EOF

# 2. Script de sauvegarde des fichiers
cat > "$BACKUP_DIR/backup-files.sh" << 'EOF'
#!/bin/bash

# Script de sauvegarde des fichiers
SITE_DIR="/home/forge/api.coovia.com"
BACKUP_DIR="/home/forge/backups"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="$BACKUP_DIR/files_$DATE.tar.gz"

# Cr√©er la sauvegarde des fichiers importants
cd $SITE_DIR
tar -czf "$BACKUP_FILE" \
    --exclude='vendor' \
    --exclude='node_modules' \
    --exclude='storage/logs/*.log' \
    --exclude='storage/framework/cache/*' \
    --exclude='storage/framework/sessions/*' \
    --exclude='storage/framework/views/*' \
    --exclude='.git' \
    .

if [ $? -eq 0 ]; then
    echo "‚úÖ Sauvegarde des fichiers cr√©√©e: $BACKUP_FILE"
else
    echo "‚ùå Erreur lors de la sauvegarde des fichiers"
    exit 1
fi
EOF

# 3. Script de nettoyage des anciennes sauvegardes
cat > "$BACKUP_DIR/cleanup-backups.sh" << 'EOF'
#!/bin/bash

# Script de nettoyage des anciennes sauvegardes
BACKUP_DIR="/home/forge/backups"
RETENTION_DAYS=7

echo "üßπ Nettoyage des sauvegardes de plus de $RETENTION_DAYS jours..."

# Supprimer les anciennes sauvegardes de base de donn√©es
find "$BACKUP_DIR" -name "database_*.sql.gz" -mtime +$RETENTION_DAYS -delete

# Supprimer les anciennes sauvegardes de fichiers
find "$BACKUP_DIR" -name "files_*.tar.gz" -mtime +$RETENTION_DAYS -delete

echo "‚úÖ Nettoyage termin√©"
EOF

# 4. Script de restauration
cat > "$BACKUP_DIR/restore-database.sh" << 'EOF'
#!/bin/bash

# Script de restauration de la base de donn√©es
SITE_DIR="/home/forge/api.coovia.com"
BACKUP_DIR="/home/forge/backups"

if [ -z "$1" ]; then
    echo "Usage: $0 <fichier_sauvegarde>"
    echo "Exemple: $0 database_20231201_120000.sql.gz"
    exit 1
fi

BACKUP_FILE="$BACKUP_DIR/$1"

if [ ! -f "$BACKUP_FILE" ]; then
    echo "‚ùå Fichier de sauvegarde non trouv√©: $BACKUP_FILE"
    exit 1
fi

cd $SITE_DIR
if [ -f ".env" ]; then
    # Extraire les informations de connexion depuis .env
    DB_HOST=$(grep DB_HOST .env | cut -d '=' -f2)
    DB_PORT=$(grep DB_PORT .env | cut -d '=' -f2)
    DB_DATABASE=$(grep DB_DATABASE .env | cut -d '=' -f2)
    DB_USERNAME=$(grep DB_USERNAME .env | cut -d '=' -f2)
    DB_PASSWORD=$(grep DB_PASSWORD .env | cut -d '=' -f2)
    
    echo "‚ö†Ô∏è ATTENTION: Cette op√©ration va √©craser la base de donn√©es actuelle!"
    read -p "√ätes-vous s√ªr? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Restaurer la sauvegarde
        if [[ "$BACKUP_FILE" == *.gz ]]; then
            gunzip -c "$BACKUP_FILE" | PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USERNAME" -d "$DB_DATABASE"
        else
            PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USERNAME" -d "$DB_DATABASE" < "$BACKUP_FILE"
        fi
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ Base de donn√©es restaur√©e avec succ√®s"
        else
            echo "‚ùå Erreur lors de la restauration"
            exit 1
        fi
    else
        echo "‚ùå Restauration annul√©e"
    fi
else
    echo "‚ùå Fichier .env non trouv√©"
    exit 1
fi
EOF

# Rendre les scripts ex√©cutables
chmod +x "$BACKUP_DIR/backup-database.sh"
chmod +x "$BACKUP_DIR/backup-files.sh"
chmod +x "$BACKUP_DIR/cleanup-backups.sh"
chmod +x "$BACKUP_DIR/restore-database.sh"

# 5. Configuration des t√¢ches cron
echo "‚è∞ Configuration des t√¢ches cron..."

# Sauvegarde quotidienne de la base de donn√©es √† 2h du matin
(crontab -l 2>/dev/null; echo "0 2 * * * $BACKUP_DIR/backup-database.sh >> $BACKUP_DIR/backup.log 2>&1") | crontab -

# Sauvegarde hebdomadaire des fichiers le dimanche √† 3h du matin
(crontab -l 2>/dev/null; echo "0 3 * * 0 $BACKUP_DIR/backup-files.sh >> $BACKUP_DIR/backup.log 2>&1") | crontab -

# Nettoyage quotidien des anciennes sauvegardes √† 4h du matin
(crontab -l 2>/dev/null; echo "0 4 * * * $BACKUP_DIR/cleanup-backups.sh >> $BACKUP_DIR/backup.log 2>&1") | crontab -

# 6. Cr√©er un script de test de sauvegarde
cat > "$BACKUP_DIR/test-backup.sh" << 'EOF'
#!/bin/bash

# Script de test des sauvegardes
BACKUP_DIR="/home/forge/backups"

echo "üß™ Test des sauvegardes..."

# Tester la sauvegarde de la base de donn√©es
echo "üìä Test de la sauvegarde de la base de donn√©es..."
$BACKUP_DIR/backup-database.sh

# Tester la sauvegarde des fichiers
echo "üìÅ Test de la sauvegarde des fichiers..."
$BACKUP_DIR/backup-files.sh

# Lister les sauvegardes
echo "üìã Sauvegardes disponibles:"
ls -la $BACKUP_DIR/*.gz 2>/dev/null || echo "Aucune sauvegarde trouv√©e"

echo "‚úÖ Test termin√©"
EOF

chmod +x "$BACKUP_DIR/test-backup.sh"

# 7. Cr√©er un fichier de documentation
cat > "$BACKUP_DIR/README.md" << 'EOF'
# Configuration des Sauvegardes - Laravel Forge

## Scripts disponibles

### backup-database.sh
Sauvegarde la base de donn√©es PostgreSQL.
- **Ex√©cution**: Quotidienne √† 2h du matin
- **Format**: SQL compress√© (.sql.gz)
- **R√©tention**: 7 jours

### backup-files.sh
Sauvegarde les fichiers de l'application.
- **Ex√©cution**: Hebdomadaire le dimanche √† 3h du matin
- **Format**: Archive tar.gz
- **R√©tention**: 7 jours

### cleanup-backups.sh
Nettoie les anciennes sauvegardes.
- **Ex√©cution**: Quotidienne √† 4h du matin
- **Supprime**: Sauvegardes de plus de 7 jours

### restore-database.sh
Restaure une sauvegarde de base de donn√©es.
- **Usage**: `./restore-database.sh database_20231201_120000.sql.gz`
- **Attention**: √âcrase la base de donn√©es actuelle

### test-backup.sh
Teste tous les scripts de sauvegarde.

## T√¢ches cron configur√©es

```bash
# Sauvegarde quotidienne de la base de donn√©es
0 2 * * * /home/forge/backups/backup-database.sh

# Sauvegarde hebdomadaire des fichiers
0 3 * * 0 /home/forge/backups/backup-files.sh

# Nettoyage des anciennes sauvegardes
0 4 * * * /home/forge/backups/cleanup-backups.sh
```

## Logs

Les logs des sauvegardes sont disponibles dans `/home/forge/backups/backup.log`

## Restauration

Pour restaurer une sauvegarde :

1. Lister les sauvegardes disponibles :
   ```bash
   ls -la /home/forge/backups/
   ```

2. Restaurer une sauvegarde :
   ```bash
   cd /home/forge/backups/
   ./restore-database.sh database_20231201_120000.sql.gz
   ```

## Monitoring

Pour v√©rifier que les sauvegardes fonctionnent :

```bash
# V√©rifier les logs
tail -f /home/forge/backups/backup.log

# Tester manuellement
cd /home/forge/backups/
./test-backup.sh
```
EOF

echo "‚úÖ Configuration des sauvegardes termin√©e!"
echo ""
echo "üìã R√©sum√© de la configuration:"
echo "================================"
echo "üìÅ R√©pertoire de sauvegarde: $BACKUP_DIR"
echo "‚è∞ Sauvegarde DB: Quotidienne √† 2h"
echo "‚è∞ Sauvegarde fichiers: Hebdomadaire le dimanche √† 3h"
echo "üßπ Nettoyage: Quotidien √† 4h"
echo "üìÖ R√©tention: $BACKUP_RETENTION_DAYS jours"
echo ""
echo "üß™ Pour tester les sauvegardes:"
echo "cd $BACKUP_DIR && ./test-backup.sh"
echo ""
echo "üìñ Documentation: $BACKUP_DIR/README.md"
