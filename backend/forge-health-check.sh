#!/bin/bash

# Script de v√©rification de sant√© post-d√©ploiement pour Laravel Forge
# Ce script v√©rifie que l'application fonctionne correctement apr√®s le d√©ploiement

echo "üè• V√©rification de sant√© de l'application..."

# Variables
SITE_DIR="/home/forge/api.coovia.com"
DOMAIN="api.coovia.com"
HEALTH_ENDPOINT="https://$DOMAIN/health"
API_ENDPOINT="https://$DOMAIN/api"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

# 1. V√©rifier que le r√©pertoire existe
echo "üìÅ V√©rification du r√©pertoire..."
if [ -d "$SITE_DIR" ]; then
    print_status 0 "R√©pertoire du site trouv√©"
else
    print_status 1 "R√©pertoire du site manquant"
    exit 1
fi

# 2. V√©rifier que le fichier .env existe
echo "üîß V√©rification du fichier .env..."
if [ -f "$SITE_DIR/.env" ]; then
    print_status 0 "Fichier .env trouv√©"
else
    print_status 1 "Fichier .env manquant"
fi

# 3. V√©rifier les permissions
echo "üîê V√©rification des permissions..."
if [ -w "$SITE_DIR/storage" ] && [ -w "$SITE_DIR/bootstrap/cache" ]; then
    print_status 0 "Permissions correctes"
else
    print_status 1 "Probl√®mes de permissions d√©tect√©s"
    print_warning "Ex√©cutez: chmod -R 755 $SITE_DIR/storage $SITE_DIR/bootstrap/cache"
fi

# 4. V√©rifier la configuration de la base de donn√©es
echo "üóÑÔ∏è V√©rification de la base de donn√©es..."
cd $SITE_DIR
if php artisan migrate:status > /dev/null 2>&1; then
    print_status 0 "Connexion √† la base de donn√©es OK"
else
    print_status 1 "Probl√®me de connexion √† la base de donn√©es"
fi

# 5. V√©rifier les services PHP-FPM et Nginx
echo "üîß V√©rification des services..."
if systemctl is-active --quiet php8.2-fpm; then
    print_status 0 "PHP-FPM actif"
else
    print_status 1 "PHP-FPM inactif"
fi

if systemctl is-active --quiet nginx; then
    print_status 0 "Nginx actif"
else
    print_status 1 "Nginx inactif"
fi

# 6. V√©rifier l'endpoint de sant√©
echo "üè• Test de l'endpoint de sant√©..."
if curl -s -f "$HEALTH_ENDPOINT" > /dev/null; then
    print_status 0 "Endpoint de sant√© accessible"
else
    print_status 1 "Endpoint de sant√© inaccessible"
fi

# 7. V√©rifier l'API
echo "üåê Test de l'API..."
API_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$API_ENDPOINT")
if [ "$API_RESPONSE" = "200" ] || [ "$API_RESPONSE" = "401" ] || [ "$API_RESPONSE" = "404" ]; then
    print_status 0 "API accessible (HTTP $API_RESPONSE)"
else
    print_status 1 "API inaccessible (HTTP $API_RESPONSE)"
fi

# 8. V√©rifier les logs d'erreur
echo "üìã V√©rification des logs..."
if [ -f "$SITE_DIR/storage/logs/laravel.log" ]; then
    ERROR_COUNT=$(tail -n 100 "$SITE_DIR/storage/logs/laravel.log" | grep -c "ERROR\|CRITICAL\|EMERGENCY" || echo "0")
    if [ "$ERROR_COUNT" -eq 0 ]; then
        print_status 0 "Aucune erreur r√©cente dans les logs"
    else
        print_warning "$ERROR_COUNT erreurs r√©centes dans les logs"
    fi
else
    print_warning "Fichier de log Laravel non trouv√©"
fi

# 9. V√©rifier l'espace disque
echo "üíæ V√©rification de l'espace disque..."
DISK_USAGE=$(df -h "$SITE_DIR" | tail -1 | awk '{print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -lt 80 ]; then
    print_status 0 "Espace disque suffisant ($DISK_USAGE% utilis√©)"
else
    print_warning "Espace disque faible ($DISK_USAGE% utilis√©)"
fi

# 10. V√©rifier la m√©moire
echo "üß† V√©rification de la m√©moire..."
MEMORY_USAGE=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
if [ "$MEMORY_USAGE" -lt 80 ]; then
    print_status 0 "M√©moire suffisante ($MEMORY_USAGE% utilis√©e)"
else
    print_warning "M√©moire faible ($MEMORY_USAGE% utilis√©e)"
fi

# 11. V√©rifier les daemons
echo "üîÑ V√©rification des daemons..."
if pgrep -f "queue:work" > /dev/null; then
    print_status 0 "Queue worker actif"
else
    print_warning "Queue worker inactif"
fi

# 12. V√©rifier la configuration SSL
echo "üîí V√©rification SSL..."
if curl -s -I "$HEALTH_ENDPOINT" | grep -q "HTTP/2 200"; then
    print_status 0 "SSL configur√© et fonctionnel"
else
    print_warning "SSL non configur√© ou probl√®me d√©tect√©"
fi

# 13. V√©rifier les variables d'environnement critiques
echo "‚öôÔ∏è V√©rification des variables d'environnement..."
cd $SITE_DIR
if grep -q "APP_KEY=base64:" .env; then
    print_status 0 "Cl√© d'application configur√©e"
else
    print_status 1 "Cl√© d'application manquante"
fi

if grep -q "APP_ENV=production" .env; then
    print_status 0 "Environnement de production configur√©"
else
    print_warning "Environnement non configur√© en production"
fi

if grep -q "APP_DEBUG=false" .env; then
    print_status 0 "Mode debug d√©sactiv√©"
else
    print_warning "Mode debug activ√© en production"
fi

# 14. Test de performance basique
echo "‚ö° Test de performance..."
START_TIME=$(date +%s.%N)
curl -s "$HEALTH_ENDPOINT" > /dev/null
END_TIME=$(date +%s.%N)
RESPONSE_TIME=$(echo "$END_TIME - $START_TIME" | bc -l)
RESPONSE_TIME_MS=$(echo "$RESPONSE_TIME * 1000" | bc -l | cut -d. -f1)

if [ "$RESPONSE_TIME_MS" -lt 1000 ]; then
    print_status 0 "Performance OK (${RESPONSE_TIME_MS}ms)"
else
    print_warning "Performance lente (${RESPONSE_TIME_MS}ms)"
fi

# R√©sum√© final
echo ""
echo "üìä R√©sum√© de la v√©rification de sant√©:"
echo "======================================"

# Compter les succ√®s et √©checs
SUCCESS_COUNT=$(grep -c "‚úÖ" <<< "$(tail -n 50 /dev/stdout)" || echo "0")
WARNING_COUNT=$(grep -c "‚ö†Ô∏è" <<< "$(tail -n 50 /dev/stdout)" || echo "0")
ERROR_COUNT=$(grep -c "‚ùå" <<< "$(tail -n 50 /dev/stdout)" || echo "0")

echo "‚úÖ Succ√®s: $SUCCESS_COUNT"
echo "‚ö†Ô∏è Avertissements: $WARNING_COUNT"
echo "‚ùå Erreurs: $ERROR_COUNT"

if [ "$ERROR_COUNT" -eq 0 ]; then
    echo -e "${GREEN}üéâ Application en bonne sant√©!${NC}"
    exit 0
else
    echo -e "${RED}‚ö†Ô∏è Probl√®mes d√©tect√©s. V√©rifiez les erreurs ci-dessus.${NC}"
    exit 1
fi
