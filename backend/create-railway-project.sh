#!/bin/bash

echo "üöÄ Cr√©ation Automatique du Projet Railway"
echo "========================================"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier si Railway CLI est install√©
print_status "V√©rification de Railway CLI..."
if ! command -v railway &> /dev/null; then
    print_warning "Railway CLI n'est pas install√©"
    echo "Installation de Railway CLI..."
    
    # Installation de Railway CLI
    if command -v npm &> /dev/null; then
        npm install -g @railway/cli
    elif command -v yarn &> /dev/null; then
        yarn global add @railway/cli
    else
        print_error "npm ou yarn n'est pas install√©. Installez Railway CLI manuellement:"
        echo "npm install -g @railway/cli"
        exit 1
    fi
fi

print_success "Railway CLI est install√©"

# V√©rifier si l'utilisateur est connect√©
print_status "V√©rification de la connexion Railway..."
if ! railway whoami &> /dev/null; then
    print_warning "Vous n'√™tes pas connect√© √† Railway"
    echo "Connexion √† Railway..."
    railway login
fi

print_success "Connect√© √† Railway"

# Cr√©er le projet Railway
print_status "Cr√©ation du projet Railway..."
PROJECT_NAME="coovia-backend"

# V√©rifier si le projet existe d√©j√†
if railway list | grep -q "$PROJECT_NAME"; then
    print_warning "Le projet $PROJECT_NAME existe d√©j√†"
    read -p "Voulez-vous utiliser le projet existant ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_status "Cr√©ation d'un nouveau projet..."
        PROJECT_NAME="coovia-backend-$(date +%s)"
    fi
fi

# Cr√©er le projet
print_status "Initialisation du projet Railway..."
if railway init --name "$PROJECT_NAME"; then
    print_success "Projet Railway cr√©√©: $PROJECT_NAME"
else
    print_error "Erreur lors de la cr√©ation du projet"
    exit 1
fi

# Obtenir l'ID du projet
PROJECT_ID=$(railway list | grep "$PROJECT_NAME" | awk '{print $1}')
print_status "ID du projet: $PROJECT_ID"

# Configurer le d√©ploiement depuis GitHub
print_status "Configuration du d√©ploiement depuis GitHub..."
if railway service --name "backend"; then
    print_success "Service backend configur√©"
else
    print_warning "Service backend d√©j√† existant ou erreur"
fi

# Configurer les variables d'environnement
print_status "Configuration des variables d'environnement..."
if [ -f "railway.env" ]; then
    print_status "Application des variables depuis railway.env..."
    railway variables set --file railway.env
    print_success "Variables d'environnement configur√©es"
else
    print_warning "Fichier railway.env non trouv√©"
    print_status "Configuration manuelle des variables requise"
fi

# D√©ployer le projet
print_status "D√©marrage du d√©ploiement..."
if railway up; then
    print_success "D√©ploiement lanc√© avec succ√®s"
else
    print_warning "Erreur lors du d√©ploiement"
fi

# Obtenir l'URL du projet
print_status "R√©cup√©ration de l'URL du projet..."
PROJECT_URL=$(railway domain)
if [ ! -z "$PROJECT_URL" ]; then
    print_success "URL du projet: https://$PROJECT_URL"
    echo ""
    echo "üåê Votre API sera accessible sur:"
    echo "   https://$PROJECT_URL"
    echo ""
    echo "üìã Endpoints de test:"
    echo "   https://$PROJECT_URL/api/health"
    echo "   https://$PROJECT_URL/api/status"
    echo "   https://$PROJECT_URL/api/test"
else
    print_warning "URL du projet non disponible"
fi

echo ""
print_success "Configuration Railway termin√©e !"
echo ""
echo "üìã Prochaines √©tapes:"
echo "1. V√©rifiez les logs dans l'interface Railway"
echo "2. Testez les endpoints de l'API"
echo "3. Configurez un domaine personnalis√© si n√©cessaire"
echo ""
echo "üîó Interface Railway: https://railway.app/project/$PROJECT_ID"
