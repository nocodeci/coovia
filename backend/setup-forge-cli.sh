#!/bin/bash

# Script de configuration initial pour Forge CLI
# Ce script vous guide √† travers la configuration initiale

echo "üîß Configuration initiale Forge CLI"
echo "===================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier que forge CLI est install√©
check_forge_cli() {
    print_info "V√©rification de Forge CLI..."
    
    if command -v forge &> /dev/null; then
        print_success "Forge CLI install√©"
        forge --version
    else
        print_error "Forge CLI non install√©"
        print_info "Installation en cours..."
        
        composer global require laravel/forge-cli
        
        if [ $? -eq 0 ]; then
            print_success "Forge CLI install√© avec succ√®s"
            
            # Ajouter au PATH
            echo 'export PATH="$HOME/.composer/vendor/bin:$PATH"' >> ~/.zshrc
            source ~/.zshrc
            
            print_info "Forge CLI ajout√© au PATH"
        else
            print_error "Erreur lors de l'installation de Forge CLI"
            exit 1
        fi
    fi
}

# V√©rifier l'authentification
check_authentication() {
    print_info "V√©rification de l'authentification..."
    
    if forge server:list &> /dev/null; then
        print_success "Authentifi√© avec Forge"
        return 0
    else
        print_warning "Non authentifi√© avec Forge"
        return 1
    fi
}

# Guider l'utilisateur pour l'authentification
guide_authentication() {
    print_info "Guide d'authentification Forge"
    echo ""
    echo "üìã √âtapes pour obtenir votre token API :"
    echo "========================================"
    echo "1. Allez sur https://forge.laravel.com"
    echo "2. Connectez-vous √† votre compte"
    echo "3. Allez dans 'User Settings' (en haut √† droite)"
    echo "4. Cliquez sur 'API Tokens'"
    echo "5. Cliquez sur 'Create Token'"
    echo "6. Donnez un nom √† votre token (ex: 'CLI Access')"
    echo "7. Copiez le token g√©n√©r√©"
    echo ""
    echo "üîë Le token ressemble √† :"
    echo "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9..."
    echo ""
    
    read -p "Avez-vous votre token API ? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_info "Authentification en cours..."
        forge login
        
        if check_authentication; then
            print_success "Authentification r√©ussie !"
        else
            print_error "√âchec de l'authentification"
            print_info "V√©rifiez votre token et r√©essayez"
        fi
    else
        print_info "Obtenez votre token d'abord, puis relancez ce script"
    fi
}

# V√©rifier les serveurs
check_servers() {
    print_info "V√©rification des serveurs..."
    
    if check_authentication; then
        print_info "Serveurs disponibles :"
        forge server:list
        
        SERVER_COUNT=$(forge server:list | grep -c "Server" || echo "0")
        
        if [ "$SERVER_COUNT" -eq 0 ]; then
            print_warning "Aucun serveur trouv√©"
            guide_server_creation
        else
            print_success "$SERVER_COUNT serveur(s) trouv√©(s)"
        fi
    else
        print_error "Non authentifi√© - impossible de v√©rifier les serveurs"
    fi
}

# Guider la cr√©ation de serveur
guide_server_creation() {
    print_info "Guide de cr√©ation de serveur"
    echo ""
    echo "üìã √âtapes pour cr√©er un serveur :"
    echo "================================="
    echo "1. Allez sur https://forge.laravel.com"
    echo "2. Cliquez sur 'Create Server'"
    echo "3. Choisissez votre provider :"
    echo "   - DigitalOcean (recommand√©)"
    echo "   - Linode"
    echo "   - Vultr"
    echo "   - AWS"
    echo "4. S√©lectionnez la r√©gion (proche de vos utilisateurs)"
    echo "5. Choisissez la taille du serveur :"
    echo "   - 1GB RAM minimum pour Laravel"
    echo "   - 2GB RAM recommand√© pour la production"
    echo "6. S√©lectionnez PHP 8.2 ou sup√©rieur"
    echo "7. Activez 'Install Redis' si n√©cessaire"
    echo "8. Cliquez sur 'Create Server'"
    echo ""
    echo "‚è±Ô∏è La cr√©ation prend 5-10 minutes"
    echo ""
    
    read -p "Avez-vous cr√©√© un serveur ? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_success "Serveur cr√©√© !"
        print_info "Vous pouvez maintenant utiliser le script de d√©ploiement"
    else
        print_info "Cr√©ez un serveur d'abord, puis relancez ce script"
    fi
}

# V√©rifier les sites
check_sites() {
    print_info "V√©rification des sites..."
    
    if check_authentication; then
        print_info "Sites disponibles :"
        forge site:list
        
        SITE_COUNT=$(forge site:list | grep -c "Site" || echo "0")
        
        if [ "$SITE_COUNT" -eq 0 ]; then
            print_warning "Aucun site trouv√©"
            guide_site_creation
        else
            print_success "$SITE_COUNT site(s) trouv√©(s)"
        fi
    else
        print_error "Non authentifi√© - impossible de v√©rifier les sites"
    fi
}

# Guider la cr√©ation de site
guide_site_creation() {
    print_info "Guide de cr√©ation de site"
    echo ""
    echo "üìã √âtapes pour cr√©er un site :"
    echo "=============================="
    echo "1. Dans votre serveur Forge, cliquez sur 'Sites'"
    echo "2. Cliquez sur 'New Site'"
    echo "3. Entrez le nom du site :"
    echo "   - Exemple : api.coovia.com"
    echo "   - Ou : coovia-api.com"
    echo "4. S√©lectionnez PHP 8.2"
    echo "5. Cliquez sur 'Add Site'"
    echo ""
    echo "üîß Configuration du repository :"
    echo "1. Dans votre site, allez dans 'Git Repository'"
    echo "2. Entrez l'URL de votre repository Git"
    echo "3. S√©lectionnez la branche (main ou master)"
    echo "4. Cliquez sur 'Install Repository'"
    echo ""
    echo "‚öôÔ∏è Configuration de l'environnement :"
    echo "1. Dans votre site, allez dans 'Environment'"
    echo "2. Copiez le contenu de production.env"
    echo "3. Adaptez les variables selon votre configuration"
    echo "4. Sauvegardez"
    echo ""
    
    read -p "Avez-vous cr√©√© un site ? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_success "Site cr√©√© !"
        print_info "Vous pouvez maintenant d√©ployer avec : ./forge-cli-deploy.sh"
    else
        print_info "Cr√©ez un site d'abord, puis relancez ce script"
    fi
}

# Menu principal
show_menu() {
    echo ""
    echo "üîß Menu de configuration Forge CLI"
    echo "=================================="
    echo "1. V√©rifier/Installer Forge CLI"
    echo "2. Authentification"
    echo "3. V√©rifier les serveurs"
    echo "4. V√©rifier les sites"
    echo "5. Configuration compl√®te"
    echo "6. Quitter"
    echo ""
}

# Configuration compl√®te
complete_setup() {
    print_info "Configuration compl√®te en cours..."
    
    check_forge_cli
    echo ""
    
    if ! check_authentication; then
        guide_authentication
        echo ""
    fi
    
    check_servers
    echo ""
    
    check_sites
    echo ""
    
    print_success "Configuration termin√©e !"
    print_info "Vous pouvez maintenant utiliser : ./forge-cli-deploy.sh"
}

# Fonction principale
main() {
    echo "üîß Configuration initiale Forge CLI"
    echo "===================================="
    echo ""
    
    # Menu interactif
    while true; do
        show_menu
        read -p "Choisissez une option (1-6): " choice
        
        case $choice in
            1)
                check_forge_cli
                ;;
            2)
                if ! check_authentication; then
                    guide_authentication
                else
                    print_success "D√©j√† authentifi√©"
                fi
                ;;
            3)
                check_servers
                ;;
            4)
                check_sites
                ;;
            5)
                complete_setup
                break
                ;;
            6)
                print_info "Au revoir!"
                exit 0
                ;;
            *)
                print_error "Option invalide"
                ;;
        esac
        
        echo ""
        read -p "Appuyez sur Entr√©e pour continuer..."
    done
}

# Ex√©cuter la fonction principale
main
