#!/bin/bash

# Script de test pour v√©rifier la configuration CORS et Sanctum

echo "üß™ Test de la configuration CORS et Sanctum"
echo "=========================================="
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

# Test 1: V√©rifier que le serveur r√©pond
echo "1. Test de connectivit√© du serveur..."
curl -s http://localhost:8000/api/health > /dev/null
print_result $? "Serveur Laravel accessible"

# Test 2: Test CORS preflight
echo ""
echo "2. Test CORS preflight..."
CORS_RESPONSE=$(curl -s -X OPTIONS \
  -H "Origin: http://localhost:5173" \
  -H "Access-Control-Request-Method: POST" \
  -H "Access-Control-Request-Headers: Content-Type,Authorization" \
  -w "%{http_code}" \
  http://localhost:8000/api/auth/login)

if [[ $CORS_RESPONSE == *"200"* ]]; then
    print_result 0 "CORS preflight r√©ussi"
else
    print_result 1 "CORS preflight √©chou√© (Code: $CORS_RESPONSE)"
fi

# Test 3: V√©rifier les en-t√™tes CORS
echo ""
echo "3. V√©rification des en-t√™tes CORS..."
CORS_HEADERS=$(curl -s -I -X OPTIONS \
  -H "Origin: http://localhost:5173" \
  http://localhost:8000/api/auth/login)

if echo "$CORS_HEADERS" | grep -q "Access-Control-Allow-Origin"; then
    print_result 0 "En-t√™te Access-Control-Allow-Origin pr√©sent"
else
    print_result 1 "En-t√™te Access-Control-Allow-Origin manquant"
fi

if echo "$CORS_HEADERS" | grep -q "Access-Control-Allow-Credentials: true"; then
    print_result 0 "En-t√™te Access-Control-Allow-Credentials correct"
else
    print_result 1 "En-t√™te Access-Control-Allow-Credentials incorrect ou manquant"
fi

# Test 4: Test de la route Sanctum CSRF
echo ""
echo "4. Test de la route Sanctum CSRF..."
CSRF_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:8000/sanctum/csrf-cookie)
if [[ $CSRF_RESPONSE == *"204"* ]] || [[ $CSRF_RESPONSE == *"200"* ]]; then
    print_result 0 "Route Sanctum CSRF accessible"
else
    print_result 1 "Route Sanctum CSRF inaccessible (Code: $CSRF_RESPONSE)"
fi

# Test 5: V√©rifier la configuration
echo ""
echo "5. V√©rification de la configuration..."
if grep -q "supports_credentials.*true" config/cors.php; then
    print_result 0 "supports_credentials = true dans config/cors.php"
else
    print_result 1 "supports_credentials n'est pas true dans config/cors.php"
fi

if grep -q "localhost:5173" config/cors.php; then
    print_result 0 "localhost:5173 autoris√© dans config/cors.php"
else
    print_result 1 "localhost:5173 non autoris√© dans config/cors.php"
fi

# Test 6: V√©rifier les variables d'environnement
echo ""
echo "6. V√©rification des variables d'environnement..."
if [ -f ".env" ]; then
    print_result 0 "Fichier .env existe"
    
    if grep -q "SANCTUM_STATEFUL_DOMAINS" .env; then
        print_result 0 "SANCTUM_STATEFUL_DOMAINS configur√©"
    else
        print_result 1 "SANCTUM_STATEFUL_DOMAINS non configur√©"
    fi
else
    print_result 1 "Fichier .env manquant"
fi

echo ""
echo "üéØ R√©sum√© des tests :"
echo "===================="
echo ""
echo "Si tous les tests sont verts (‚úÖ), votre configuration CORS et Sanctum"
echo "est correcte et pr√™te √† √™tre utilis√©e avec le frontend."
echo ""
echo "Si certains tests sont rouges (‚ùå), consultez le guide de d√©pannage :"
echo "üìñ frontend/SANCTUM_CORS_FIX.md"
echo ""
echo "üöÄ Pour red√©marrer le serveur avec la nouvelle configuration :"
echo "   ./restart-server.sh"
