<?php
/**
 * Diagnostic du backend Laravel sur Forge
 * Identifie les probl√®mes de configuration et de d√©ploiement
 */

$baseUrl = 'https://api.wozif.com';

echo "üîç DIAGNOSTIC DU BACKEND FORGE - COOVIA\n";
echo "========================================\n\n";

echo "URL test√©e: {$baseUrl}\n";
echo "Timestamp: " . date('Y-m-d H:i:s') . "\n\n";

/**
 * Fonction pour effectuer une requ√™te HTTP
 */
function makeRequest($url, $method = 'GET', $data = null, $headers = []) {
    $ch = curl_init();
    
    $defaultHeaders = [
        'Content-Type: application/json',
        'Accept: application/json',
        'User-Agent: Coovia-Diagnostic/1.0'
    ];
    
    $headers = array_merge($defaultHeaders, $headers);
    
    curl_setopt_array($ch, [
        CURLOPT_URL => $url,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_TIMEOUT => 20,
        CURLOPT_HTTPHEADER => $headers,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_SSL_VERIFYHOST => false,
        CURLOPT_VERBOSE => false,
    ]);
    
    if ($method === 'POST' && $data) {
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    } elseif ($method !== 'GET') {
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
        if ($data) {
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        }
    }
    
    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $error = curl_error($ch);
    $info = curl_getinfo($ch);
    
    curl_close($ch);
    
    return [
        'http_code' => $httpCode,
        'response' => $response,
        'error' => $error,
        'info' => $info
    ];
}

/**
 * Test de connectivit√© de base
 */
echo "üîç 1. TEST DE CONNECTIVIT√â DE BASE\n";
echo "==================================\n";

$result = makeRequest($baseUrl);
echo "URL: {$baseUrl}\n";

if ($result['error']) {
    echo "‚ùå Erreur cURL: {$result['error']}\n";
} else {
    echo "‚úÖ Connexion √©tablie\n";
    echo "   HTTP Code: {$result['http_code']}\n";
    echo "   Taille r√©ponse: " . strlen($result['response']) . " bytes\n";
    echo "   Temps de r√©ponse: " . round($result['info']['total_time'] * 1000, 2) . "ms\n";
}

echo "\n";

/**
 * Analyse de la r√©ponse
 */
echo "üìÑ 2. ANALYSE DE LA R√âPONSE\n";
echo "===========================\n";

if (isset($result['response']) && $result['response']) {
    $response = $result['response'];
    
    // V√©rifier le type de contenu
    if (strpos($response, '<!DOCTYPE html>') !== false) {
        echo "üìù Type: Page HTML (probablement une page d'erreur Laravel)\n";
        
        // Chercher des indices d'erreur
        if (strpos($response, 'Server Error') !== false) {
            echo "‚ùå Erreur: Page d'erreur serveur Laravel\n";
        } elseif (strpos($response, 'Not Found') !== false) {
            echo "‚ùå Erreur: Page 404 Laravel\n";
        } elseif (strpos($response, 'Whoops') !== false) {
            echo "‚ùå Erreur: Page d'erreur Whoops (d√©veloppement)\n";
        }
        
        // Extraire des informations utiles
        if (preg_match('/<title>(.*?)<\/title>/', $response, $matches)) {
            echo "   Titre: {$matches[1]}\n";
        }
        
        // Chercher des messages d'erreur
        if (preg_match('/<div[^>]*class="[^"]*error[^"]*"[^>]*>(.*?)<\/div>/s', $response, $matches)) {
            echo "   Message d'erreur: " . trim(strip_tags($matches[1])) . "\n";
        }
        
    } elseif (strpos($response, '{') !== false && strpos($response, '}') !== false) {
        echo "üìù Type: R√©ponse JSON\n";
        $jsonData = json_decode($response, true);
        if ($jsonData) {
            echo "‚úÖ JSON valide\n";
            if (isset($jsonData['message'])) {
                echo "   Message: {$jsonData['message']}\n";
            }
            if (isset($jsonData['error'])) {
                echo "   Erreur: {$jsonData['error']}\n";
            }
        } else {
            echo "‚ùå JSON invalide\n";
        }
    } else {
        echo "üìù Type: R√©ponse texte brut\n";
        echo "   Contenu: " . substr($response, 0, 200) . "...\n";
    }
} else {
    echo "‚ùå Aucune r√©ponse re√ßue\n";
}

echo "\n";

/**
 * Test des endpoints sp√©cifiques
 */
echo "üéØ 3. TEST DES ENDPOINTS SP√âCIFIQUES\n";
echo "===================================\n";

$endpoints = [
    '/' => 'Racine',
    '/test' => 'Test public',
    '/health' => 'Health check',
    '/ping' => 'Ping',
    '/status' => 'Statut',
    '/api/test' => 'API Test',
    '/api/health' => 'API Health',
    '/api/ping' => 'API Ping'
];

foreach ($endpoints as $endpoint => $description) {
    echo "  {$description} ({$endpoint})... ";
    
    $url = $baseUrl . $endpoint;
    $result = makeRequest($url);
    
    if ($result['error']) {
        echo "‚ùå Erreur: {$result['error']}\n";
    } else {
        echo "HTTP {$result['http_code']}";
        
        if ($result['http_code'] === 200) {
            echo " ‚úÖ";
        } elseif ($result['http_code'] === 404) {
            echo " ‚ùå 404";
        } elseif ($result['http_code'] === 500) {
            echo " ‚ùå 500";
        } else {
            echo " ‚ö†Ô∏è {$result['http_code']}";
        }
        
        echo "\n";
    }
}

echo "\n";

/**
 * Test des en-t√™tes de r√©ponse
 */
echo "üìã 4. ANALYSE DES EN-T√äTES\n";
echo "==========================\n";

$result = makeRequest($baseUrl);
if (!$result['error']) {
    $headers = [];
    
    // Extraire les en-t√™tes de la r√©ponse
    if (isset($result['info']['header_size']) && $result['info']['header_size'] > 0) {
        $headerText = substr($result['response'], 0, $result['info']['header_size']);
        $headerLines = explode("\n", $headerText);
        
        foreach ($headerLines as $line) {
            if (strpos($line, ':') !== false) {
                list($key, $value) = explode(':', $line, 2);
                $headers[trim($key)] = trim($value);
            }
        }
    }
    
    if (empty($headers)) {
        echo "‚ö†Ô∏è Aucun en-t√™te extrait\n";
    } else {
        echo "En-t√™tes d√©tect√©s:\n";
        foreach ($headers as $key => $value) {
            echo "  {$key}: {$value}\n";
        }
    }
} else {
    echo "‚ùå Impossible d'analyser les en-t√™tes\n";
}

echo "\n";

/**
 * Test de configuration Nginx
 */
echo "üåê 5. TEST DE CONFIGURATION NGINX\n";
echo "=================================\n";

// Test avec diff√©rents User-Agent
$userAgents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' => 'Navigateur standard',
    'curl/7.68.0' => 'cURL',
    'PostmanRuntime/7.29.0' => 'Postman',
    'Coovia-Test/1.0' => 'Script de test'
];

foreach ($userAgents as $userAgent => $description) {
    echo "  {$description}... ";
    
    $headers = ['User-Agent: ' . $userAgent];
    $result = makeRequest($baseUrl, 'GET', null, $headers);
    
    if ($result['error']) {
        echo "‚ùå Erreur\n";
    } else {
        echo "HTTP {$result['http_code']}\n";
    }
}

echo "\n";

/**
 * Test des m√©thodes HTTP
 */
echo "üîß 6. TEST DES M√âTHODES HTTP\n";
echo "============================\n";

$methods = ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'];
foreach ($methods as $method) {
    echo "  {$method}... ";
    
    $result = makeRequest($baseUrl, $method);
    
    if ($result['error']) {
        echo "‚ùå Erreur: {$result['error']}\n";
    } else {
        echo "HTTP {$result['http_code']}\n";
    }
}

echo "\n";

/**
 * Test de performance
 */
echo "‚ö° 7. TEST DE PERFORMANCE\n";
echo "========================\n";

$times = [];
for ($i = 0; $i < 3; $i++) {
    $start = microtime(true);
    $result = makeRequest($baseUrl);
    $end = microtime(true);
    
    if (!$result['error']) {
        $times[] = ($end - $start) * 1000;
    }
    
    usleep(500000); // 500ms de pause
}

if (!empty($times)) {
    $avgTime = array_sum($times) / count($times);
    $minTime = min($times);
    $maxTime = max($times);
    
    echo "Temps de r√©ponse:\n";
    echo "  Moyenne: " . round($avgTime, 2) . "ms\n";
    echo "  Min: " . round($minTime, 2) . "ms\n";
    echo "  Max: " . round($maxTime, 2) . "ms\n";
    
    if ($avgTime < 500) {
        echo "  Performance: ‚úÖ Excellente\n";
    } elseif ($avgTime < 1000) {
        echo "  Performance: üëç Bonne\n";
    } elseif ($avgTime < 2000) {
        echo "  Performance: ‚ö†Ô∏è Acceptable\n";
    } else {
        echo "  Performance: ‚ùå Lente\n";
    }
} else {
    echo "‚ùå Impossible de mesurer les performances\n";
}

echo "\n";

/**
 * Diagnostic des probl√®mes
 */
echo "üîç 8. DIAGNOSTIC DES PROBL√àMES\n";
echo "==============================\n";

$problems = [];

// V√©rifier les erreurs HTTP
if (isset($result['http_code'])) {
    if ($result['http_code'] === 500) {
        $problems[] = "Erreur 500 - Probl√®me serveur interne";
    } elseif ($result['http_code'] === 404) {
        $problems[] = "Erreur 404 - Route non trouv√©e";
    } elseif ($result['http_code'] >= 500) {
        $problems[] = "Erreur {$result['http_code']} - Probl√®me serveur";
    }
}

// V√©rifier la connectivit√©
if (isset($result['error']) && $result['error']) {
    $problems[] = "Probl√®me de connectivit√©: {$result['error']}";
}

// V√©rifier le contenu de la r√©ponse
if (isset($result['response']) && strpos($result['response'], 'Server Error') !== false) {
    $problems[] = "Page d'erreur serveur Laravel affich√©e";
}

if (empty($problems)) {
    echo "‚úÖ Aucun probl√®me majeur d√©tect√©\n";
} else {
    echo "‚ùå Probl√®mes identifi√©s:\n";
    foreach ($problems as $problem) {
        echo "  ‚Ä¢ {$problem}\n";
    }
}

echo "\n";

/**
 * Recommandations
 */
echo "üí° 9. RECOMMANDATIONS\n";
echo "=====================\n";

if (!empty($problems)) {
    echo "Actions recommand√©es:\n\n";
    
    if (in_array("Erreur 500 - Probl√®me serveur interne", $problems)) {
        echo "üîß Pour l'erreur 500:\n";
        echo "  1. V√©rifiez les logs Laravel sur Forge\n";
        echo "  2. V√©rifiez la configuration de la base de donn√©es\n";
        echo "  3. V√©rifiez les permissions des fichiers\n";
        echo "  4. V√©rifiez la configuration .env\n\n";
    }
    
    if (in_array("Page d'erreur serveur Laravel affich√©e", $problems)) {
        echo "üêõ Pour la page d'erreur Laravel:\n";
        echo "  1. Activez le mode debug temporairement\n";
        echo "  2. V√©rifiez les logs dans storage/logs\n";
        echo "  3. V√©rifiez la configuration de l'application\n\n";
    }
    
    echo "üìã V√©rifications g√©n√©rales:\n";
    echo "  1. V√©rifiez que Laravel est bien d√©ploy√© sur Forge\n";
    echo "  2. V√©rifiez la configuration Nginx\n";
    echo "  3. V√©rifiez les variables d'environnement\n";
    echo "  4. V√©rifiez la connectivit√© √† la base de donn√©es\n";
    echo "  5. V√©rifiez les permissions des dossiers storage et bootstrap/cache\n";
} else {
    echo "‚úÖ Votre backend semble fonctionner correctement\n";
    echo "   Vous pouvez maintenant lancer les tests complets\n";
}

echo "\n";

/**
 * R√©sum√©
 */
echo "üìä R√âSUM√â DU DIAGNOSTIC\n";
echo "=======================\n";
echo "URL test√©e: {$baseUrl}\n";
echo "Statut: " . (empty($problems) ? "‚úÖ Fonctionnel" : "‚ùå Probl√®mes d√©tect√©s") . "\n";
echo "Probl√®mes identifi√©s: " . count($problems) . "\n";
echo "Timestamp: " . date('Y-m-d H:i:s') . "\n";

echo "\nüèÅ Diagnostic termin√© !\n";
echo "Utilisez ces informations pour r√©soudre les probl√®mes identifi√©s.\n";
