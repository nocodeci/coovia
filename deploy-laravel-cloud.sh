#!/bin/bash

# üöÄ Script de D√©ploiement Laravel Cloud
# Usage: ./deploy-laravel-cloud.sh

set -e

echo "üöÄ D√©marrage du d√©ploiement Laravel Cloud..."

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -d "backend" ]; then
    log_error "Le r√©pertoire 'backend' n'existe pas. Ex√©cutez ce script depuis la racine du projet."
    exit 1
fi

# V√©rifier que Laravel Cloud CLI est install√©
if ! command -v laravel &> /dev/null; then
    log_error "Laravel Cloud CLI n'est pas install√©. Installez-le avec: composer global require laravel/cloud"
    exit 1
fi

# √âtape 1: Pr√©paration du code
log_info "√âtape 1: Pr√©paration du code..."
cd backend

# Nettoyer les caches existants
log_info "Nettoyage des caches..."
php artisan config:clear
php artisan route:clear
php artisan view:clear
php artisan cache:clear

# Installer les d√©pendances de production
log_info "Installation des d√©pendances de production..."
composer install --optimize-autoloader --no-dev

# Cacher les configurations
log_info "Mise en cache des configurations..."
php artisan config:cache
php artisan route:cache
php artisan view:cache

# V√©rifier que la cl√© d'application existe
if [ ! -f ".env" ] || ! grep -q "APP_KEY=base64:" .env; then
    log_warning "G√©n√©ration de la cl√© d'application..."
    php artisan key:generate
fi

cd ..

# √âtape 2: V√©rification Git
log_info "√âtape 2: V√©rification Git..."
if [ -n "$(git status --porcelain)" ]; then
    log_warning "Il y a des modifications non commit√©es. Voulez-vous les committer ? (y/n)"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        git add .
        git commit -m "feat: prepare for Laravel Cloud deployment"
        log_success "Modifications commit√©es"
    else
        log_warning "D√©ploiement avec modifications non commit√©es"
    fi
fi

# √âtape 3: Push vers GitHub
log_info "√âtape 3: Push vers GitHub..."
git push origin cursor
log_success "Code pouss√© vers GitHub"

# √âtape 4: D√©ploiement Laravel Cloud
log_info "√âtape 4: D√©ploiement Laravel Cloud..."

# V√©rifier la connexion Laravel Cloud
if ! laravel cloud projects &> /dev/null; then
    log_error "Non connect√© √† Laravel Cloud. Connectez-vous avec: laravel cloud login"
    exit 1
fi

# D√©ployer l'application
log_info "D√©ploiement en cours..."
cd backend
laravel cloud deploy

# √âtape 5: Post-d√©ploiement
log_info "√âtape 5: Configuration post-d√©ploiement..."

# Ex√©cuter les migrations
log_info "Ex√©cution des migrations..."
laravel cloud ssh --command="php artisan migrate --force"

# Configurer les permissions
log_info "Configuration des permissions..."
laravel cloud ssh --command="chmod -R 755 storage bootstrap/cache"
laravel cloud ssh --command="chown -R www-data:www-data storage bootstrap/cache"

# Cr√©er le lien symbolique storage
log_info "Cr√©ation du lien symbolique storage..."
laravel cloud ssh --command="php artisan storage:link"

cd ..

# √âtape 6: V√©rification
log_info "√âtape 6: V√©rification du d√©ploiement..."

# R√©cup√©rer l'URL de l'application
APP_URL=$(laravel cloud env | grep APP_URL | cut -d'=' -f2)
if [ -z "$APP_URL" ]; then
    log_warning "Impossible de r√©cup√©rer l'URL de l'application"
else
    log_info "URL de l'application: $APP_URL"
    
    # Test de l'endpoint de sant√©
    log_info "Test de l'endpoint de sant√©..."
    if curl -s -f "$APP_URL/api/health" > /dev/null; then
        log_success "Endpoint de sant√© accessible"
    else
        log_warning "Endpoint de sant√© non accessible"
    fi
    
    # Test de l'endpoint public
    log_info "Test de l'endpoint public..."
    if curl -s -f "$APP_URL/api/boutique/boutique-test" > /dev/null; then
        log_success "Endpoint public accessible"
    else
        log_warning "Endpoint public non accessible"
    fi
fi

# Afficher les logs r√©cents
log_info "Logs r√©cents:"
laravel cloud logs --lines=10

log_success "üéâ D√©ploiement termin√© avec succ√®s !"
log_info "V√©rifiez votre application √† l'adresse: $APP_URL"
log_info "Pour voir les logs: laravel cloud logs"
log_info "Pour se connecter au serveur: laravel cloud ssh"
