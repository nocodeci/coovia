"use client"

import { useState, useEffect } from "react"
import { toast } from "sonner"
import apiService from "@/lib/api"
import type { Category } from "@/types/categorie"

export function useCategorie() {
  const [categories, setCategories] = useState<Category[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const fetchCategories = async () => {
    setIsLoading(true)
    setError(null)

    try {
      console.log("üîÑ Chargement des cat√©gories depuis l'API...")
      const response = await apiService.getCategories()
      console.log("üì° R√©ponse API cat√©gories:", response)
      
      if (response.success && response.data) {
        setCategories(response.data as Category[])
      } else {
        console.error("‚ùå Erreur API cat√©gories:", response.message)
        setError(response.message || "Une erreur est survenue lors du chargement des cat√©gories")
        toast.error("Erreur", {
          description: "Impossible de charger les cat√©gories",
        })
      }
    } catch (err: any) {
      console.error("üö® Erreur lors du chargement des cat√©gories:", err)
      setError(err.message || "Une erreur est survenue lors du chargement des cat√©gories")
      toast.error("Erreur", {
        description: "Impossible de charger les cat√©gories",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const createCategory = async (categoryData: { name: string; description?: string }) => {
    setIsLoading(true)
    try {
      console.log("üîÑ Cr√©ation de la cat√©gorie:", categoryData)
      const response = await apiService.createCategory(categoryData)
      console.log("üì° R√©ponse API cr√©ation cat√©gorie:", response)
      
      if (response.success && response.data) {
        setCategories((prev) => [...prev, response.data as Category])
        toast.success("Cat√©gorie cr√©√©e", {
          description: `La cat√©gorie ${(response.data as Category).name} a √©t√© cr√©√©e avec succ√®s`,
        })
        return response.data
      } else {
        throw new Error(response.message || "Impossible de cr√©er la cat√©gorie")
      }
    } catch (err: any) {
      console.error("üö® Erreur lors de la cr√©ation de la cat√©gorie:", err)
      toast.error("Erreur", {
        description: err.message || "Impossible de cr√©er la cat√©gorie",
      })
      throw err
    } finally {
      setIsLoading(false)
    }
  }

  const updateCategory = async (categoryId: string, categoryData: Partial<Category>) => {
    setIsLoading(true)
    try {
      console.log("üîÑ Mise √† jour de la cat√©gorie:", categoryId, categoryData)
      const response = await apiService.updateCategory(categoryId, categoryData)
      console.log("üì° R√©ponse API mise √† jour cat√©gorie:", response)
      
      if (response.success && response.data) {
        setCategories((prev) => prev.map((category) => (category.id === categoryId ? response.data as Category : category)))
        toast.success("Cat√©gorie mise √† jour", {
          description: `La cat√©gorie ${(response.data as Category).name} a √©t√© mise √† jour avec succ√®s`,
        })
        return response.data
      } else {
        throw new Error(response.message || "Impossible de mettre √† jour la cat√©gorie")
      }
    } catch (err: any) {
      console.error("üö® Erreur lors de la mise √† jour de la cat√©gorie:", err)
      toast.error("Erreur", {
        description: err.message || "Impossible de mettre √† jour la cat√©gorie",
      })
      throw err
    } finally {
      setIsLoading(false)
    }
  }

  const deleteCategory = async (categoryId: string) => {
    setIsLoading(true)
    try {
      console.log("üîÑ Suppression de la cat√©gorie:", categoryId)
      const response = await apiService.deleteCategory(categoryId)
      console.log("üì° R√©ponse API suppression cat√©gorie:", response)
      
      if (response.success) {
        setCategories((prev) => prev.filter((category) => category.id !== categoryId))
        toast.success("Cat√©gorie supprim√©e", {
          description: "La cat√©gorie a √©t√© supprim√©e avec succ√®s",
        })
      } else {
        throw new Error(response.message || "Impossible de supprimer la cat√©gorie")
      }
    } catch (err: any) {
      console.error("üö® Erreur lors de la suppression de la cat√©gorie:", err)
      toast.error("Erreur", {
        description: err.message || "Impossible de supprimer la cat√©gorie",
      })
      throw err
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    fetchCategories()
  }, [])

  return {
    categories,
    isLoading,
    error,
    fetchCategories,
    createCategory,
    updateCategory,
    deleteCategory,
  }
}
